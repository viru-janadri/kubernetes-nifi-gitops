name: Deploy NiFi Changes

on:
  push:
    branches:
      - main
    paths:
      - "charts/**"
      - "apps/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.12.3"

      - name: Add Helm repositories
        run: |
          helm repo add cetic https://cetic.github.io/helm-charts
          helm repo update

      - name: Lint NiFi Helm chart
        run: |
          cd charts/viru-nifi
          helm dependency build
          helm lint .

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.12.3"

      - name: Add Helm repositories
        run: |
          helm repo add cetic https://cetic.github.io/helm-charts
          helm repo update

      - name: Build dependencies
        run: |
          cd charts/viru-nifi
          helm dependency build

      - name: Generate deployment package
        run: |
          VERSION=$(git rev-parse --short HEAD)
          cd charts/viru-nifi
          helm package . --version 0.1.0-$VERSION --app-version 1.23.2-$VERSION

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.sha }}
          tag_name: v-${{ github.sha }}
          draft: false
          prerelease: ${{ github.event.inputs.environment != 'prod' }}
          files: charts/viru-nifi/nifi-*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment
        run: |
          echo "Changes have been deployed - Version: $(git rev-parse --short HEAD)"
          echo "ArgoCD will automatically sync the changes based on the configured syncPolicy."

      - name: Update versions in ArgoCD application manifest
        if: github.event.inputs.environment == 'prod'
        run: |
          VERSION=$(git rev-parse --short HEAD)
          find apps/nifi -name "*.yaml" -type f -exec sed -i "s/targetRevision: HEAD/targetRevision: v-$VERSION/g" {} \;
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git add apps/
          git commit -m "Update ArgoCD application to use version v-$VERSION" || echo "No changes to commit"
          git push
